// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Mutex2_Join_FullMethodName    = "/Mutex2/Join"
	Mutex2_Request_FullMethodName = "/Mutex2/Request"
)

// Mutex2Client is the client API for Mutex2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Mutex2Client interface {
	Join(ctx context.Context, in *JoinMessage, opts ...grpc.CallOption) (*Empty, error)
	Request(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*Reply, error)
}

type mutex2Client struct {
	cc grpc.ClientConnInterface
}

func NewMutex2Client(cc grpc.ClientConnInterface) Mutex2Client {
	return &mutex2Client{cc}
}

func (c *mutex2Client) Join(ctx context.Context, in *JoinMessage, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Mutex2_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutex2Client) Request(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, Mutex2_Request_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Mutex2Server is the server API for Mutex2 service.
// All implementations must embed UnimplementedMutex2Server
// for forward compatibility.
type Mutex2Server interface {
	Join(context.Context, *JoinMessage) (*Empty, error)
	Request(context.Context, *RequestMessage) (*Reply, error)
	mustEmbedUnimplementedMutex2Server()
}

// UnimplementedMutex2Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMutex2Server struct{}

func (UnimplementedMutex2Server) Join(context.Context, *JoinMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedMutex2Server) Request(context.Context, *RequestMessage) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedMutex2Server) mustEmbedUnimplementedMutex2Server() {}
func (UnimplementedMutex2Server) testEmbeddedByValue()                {}

// UnsafeMutex2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Mutex2Server will
// result in compilation errors.
type UnsafeMutex2Server interface {
	mustEmbedUnimplementedMutex2Server()
}

func RegisterMutex2Server(s grpc.ServiceRegistrar, srv Mutex2Server) {
	// If the following call pancis, it indicates UnimplementedMutex2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Mutex2_ServiceDesc, srv)
}

func _Mutex2_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Mutex2Server).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mutex2_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Mutex2Server).Join(ctx, req.(*JoinMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mutex2_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Mutex2Server).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mutex2_Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Mutex2Server).Request(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Mutex2_ServiceDesc is the grpc.ServiceDesc for Mutex2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mutex2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Mutex2",
	HandlerType: (*Mutex2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Mutex2_Join_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _Mutex2_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}
