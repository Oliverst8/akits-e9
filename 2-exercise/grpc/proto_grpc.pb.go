// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MutexNode_Join_FullMethodName    = "/MutexNode/Join"
	MutexNode_Request_FullMethodName = "/MutexNode/Request"
	MutexNode_AddNode_FullMethodName = "/MutexNode/AddNode"
)

// MutexNodeClient is the client API for MutexNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MutexNodeClient interface {
	Join(ctx context.Context, in *JoinMessage, opts ...grpc.CallOption) (*JoinResponse, error)
	Request(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*Reply, error)
	AddNode(ctx context.Context, in *JoinMessage, opts ...grpc.CallOption) (*JoinMessage, error)
}

type mutexNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewMutexNodeClient(cc grpc.ClientConnInterface) MutexNodeClient {
	return &mutexNodeClient{cc}
}

func (c *mutexNodeClient) Join(ctx context.Context, in *JoinMessage, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, MutexNode_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutexNodeClient) Request(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, MutexNode_Request_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mutexNodeClient) AddNode(ctx context.Context, in *JoinMessage, opts ...grpc.CallOption) (*JoinMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinMessage)
	err := c.cc.Invoke(ctx, MutexNode_AddNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MutexNodeServer is the server API for MutexNode service.
// All implementations must embed UnimplementedMutexNodeServer
// for forward compatibility.
type MutexNodeServer interface {
	Join(context.Context, *JoinMessage) (*JoinResponse, error)
	Request(context.Context, *RequestMessage) (*Reply, error)
	AddNode(context.Context, *JoinMessage) (*JoinMessage, error)
	mustEmbedUnimplementedMutexNodeServer()
}

// UnimplementedMutexNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMutexNodeServer struct{}

func (UnimplementedMutexNodeServer) Join(context.Context, *JoinMessage) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedMutexNodeServer) Request(context.Context, *RequestMessage) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedMutexNodeServer) AddNode(context.Context, *JoinMessage) (*JoinMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedMutexNodeServer) mustEmbedUnimplementedMutexNodeServer() {}
func (UnimplementedMutexNodeServer) testEmbeddedByValue()                   {}

// UnsafeMutexNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MutexNodeServer will
// result in compilation errors.
type UnsafeMutexNodeServer interface {
	mustEmbedUnimplementedMutexNodeServer()
}

func RegisterMutexNodeServer(s grpc.ServiceRegistrar, srv MutexNodeServer) {
	// If the following call pancis, it indicates UnimplementedMutexNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MutexNode_ServiceDesc, srv)
}

func _MutexNode_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutexNodeServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MutexNode_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutexNodeServer).Join(ctx, req.(*JoinMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MutexNode_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutexNodeServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MutexNode_Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutexNodeServer).Request(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MutexNode_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MutexNodeServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MutexNode_AddNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MutexNodeServer).AddNode(ctx, req.(*JoinMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// MutexNode_ServiceDesc is the grpc.ServiceDesc for MutexNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MutexNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MutexNode",
	HandlerType: (*MutexNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _MutexNode_Join_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _MutexNode_Request_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _MutexNode_AddNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}
